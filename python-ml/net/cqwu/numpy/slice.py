#-*- coding:utf-8 -*-
"""
NumPy - 切片和索引
ndarray对象的内容可以通过索引或切片来访问和修改，就像 Python 的内置容器对象一样。
如前所述，ndarray对象中的元素遵循基于零的索引。 有三种可用的索引方法类型： 字段访问，基本切片和高级索引。
基本切片是 Python 中基本切片概念到 n 维的扩展。 通过将start，stop和step参数提供给内置的slice函数来构造一个 Python slice对象。 此slice对象被传递给数组来提取数组的一部分。

NumPy - 高级索引
如果一个ndarray是非元组序列，数据类型为整数或布尔值的ndarray，或者至少一个元素为序列对象的元组，我们就能够用它来索引ndarray。高级索引始终返回数据的副本。 与此相反，切片只提供了一个视图。
有两种类型的高级索引：整数和布尔值。
"""
import numpy as np
if __name__ == '__main__':
    a = np.arange(10)
    print a
    s = slice(2,7,2)
    print a[s]
    #通过将由冒号分隔的切片参数(start:stop:step)直接提供给ndarray对象，也可以获得相同的结果
    print a[2:7:3]
    """
    如果只输入一个参数，则将返回与索引对应的单个项目。 如果使用a:，则从该索引向后的所有项目将被提取。 如果使用两个参数(以:分隔)，则对两个索引(不包括停止索引)之间的元素以默认步骤进行切片。
    """
    a = np.arange(10)
    print a[5]
    print a[2:]
    print a[2:8]
    a = np.array([[1,2,3],[3,4,5],[4,5,6]])
    print a[1:]
    #切片还可以包括省略号(...)，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的ndarray
    print a[1]
    #第二列的元素
    print "第二列的元素"
    print a[...,1]
    print "第二行的元素"
    print a[1,...]
    print "第二列及其剩余元素"
    print a[...,1:]
    """
    整数索引
    这种机制有助于基于 N 维索引来获取数组中任意元素。 每个整数数组表示该维度的下标值。 当索引的元素个数就是目标ndarray的维度时，会变得相当直接。
    """
    x = np.array([[1,  2],  [3,  4],  [5,  6]])
    print x
    print "组中(0,0)，(1,1)和(2,0)位置处的元素"
    print x[[0,1,2],[0,1,0]]
    x= np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
    print x
    print "每个角处的元素是"
    rows = np.array([[0,0],[3,3]])
    cols = np.array([[0,2],[0,2]])
    print x[rows,cols]
    """
    高级和基本索引可以通过使用切片:或省略号...与索引数组组合。 以下示例使用slice作为列索引和高级索引。 当切片用于两者时，结果是相同的。 但高级索引会导致复制，并且可能有不同的内存布局
    """
    x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
    print x
    #先对行进行切片，在对列进行切片
    print x[1:4,1:3]
    print x[1:4,[1,2]]
    print x[1:4,[0,1,2]]
    """
    当结果对象是布尔运算(例如比较运算符)的结果时，将使用此类型的高级索引。
    """
    x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
    print x[x > 5]
    a = np.array([np.nan,1,2,np.nan,3,4,5])
    print a[np.isnan(a)]
    #过滤掉NaN
    print a[~np.isnan(a)]
    #从数组中过滤掉非复数元素
    a = np.array([1,  2+6j,  5,  3.5+5j])
    print a[np.iscomplex(a)]